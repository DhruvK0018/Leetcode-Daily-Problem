Intuition
The intution after reading the question is quite clear of traversal and storing the value in a variable sum, then making a liked list out of it.

Approach
Make a temperary variable which will point to the head->next of the linked list as it was clear in the question that first and the last node is always zero, then making a new node of name temp2 and temp3, after that traversing the list to find out the sum of the node and making a list out of it

Complexity
Time complexity:
O(n)

Space complexity:
O(n)

Code
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeNodes(ListNode* head) {
        ListNode* temp=head->next;
        ListNode* temp2=new ListNode();
        ListNode* temp3=temp2;
        int sum=0;
        while(temp!=NULL){
            while(temp!=NULL && temp->val!=0){
                sum+=temp->val;
                temp=temp->next;
            }
            ListNode* dummy=new ListNode(sum);
            temp2->next=dummy;
            temp2=temp2->next;
            temp=temp->next;
            sum=0;
        }
        return temp3->next;
    }
};
